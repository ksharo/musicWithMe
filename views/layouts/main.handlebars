<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Music With Me!</title>
    <link rel="stylesheet" href="/public/main_styles.css">
    <script language="JavaScript">
        window.addEventListener('load', () => {
            if (window.location.href.includes('newLesson')) {
                new Audio('/public/assets/sounds/success.wav').play();
            }
        });
        const INCORRECT_BEEP = false
        document.addEventListener("keydown", (event) => {
            if (window.location.href.includes('noteLesson') || window.location.href.includes('songLesson')) {
                const el = document.getElementById(event.key.toUpperCase());
                if (el != undefined && el != null) {
                    el.click();
                }
            }
            if (window.location.href.includes('newLesson')) {
                if (event.key == 'Enter' || event.key == 'Return') {
                    const el = document.getElementById('nextLevelBtn');
                    if (el != undefined && el != null) {
                        el.click();
                    }
                }
            }
        });
        function playSound(noteName) {
            if (noteName != '') {
                if (window.location.href.includes('treble')) {
                    new Audio("/public/assets/sounds/treble/Piano_treble_"+noteName.toUpperCase()+".wav").play();
                }
                else if (window.location.href.includes('bass')) {
                    new Audio("/public/assets/sounds/bass/Piano_bass_"+noteName.toUpperCase()+".wav").play();
                }
            }
            else {
                new Audio("/public/assets/sounds/buzzer.wav").play();
            }
        }
        function checkAnswer(clickedButton, rightAnswer) {
            // will not work for Sharps and Flats yet!
            const rightNote = rightAnswer.substring(rightAnswer.indexOf('.png')-2, rightAnswer.indexOf('.png'));
            if (clickedButton == rightNote.substring(0, rightNote.length-1)) {
                scoreCorrect();
                playSound(rightNote);
            }
            else {
                scoreIncorrect();
                stopTimer();
                playSound('');
                INCORRECT_BEEP && playSound('');
            }
        }
        async function processClick(noteName, rightAnswer, imgList, numQs) {
            let pictures=imgList.split(',');
            let curQ = document.getElementById('qTracker').textContent.split('/')[0].split(' ')[1];
            checkAnswer(noteName, pictures[Number(curQ)-1]);
            if (Number(curQ) + 1 > Number(numQs)) {
                try {
                    if (window.location.href.includes('noteLesson')) {
                        const curLocation = window.location.href.split('noteLesson/')[1];
                        if (window.location.href.includes('treble')) {
                            const fetchResult = await fetch('http://localhost:3030/treble/newLesson/notes/'+(Number(curLocation)+1).toString());
                            setTimeout( () => {
                                window.location.href = fetchResult.url;
                            }, 1000);
                        }
                        else if (window.location.href.includes('bass')) {
                            const fetchResult = await fetch('http://localhost:3030/bass/newLesson/notes/'+(Number(curLocation)+1).toString());
                            setTimeout( () => {
                                window.location.href = fetchResult.url;
                            }, 1000);
                        }
                    }
                    else if (window.location.href.includes('songLesson')) {
                        const curLocation = window.location.href.split('songLesson/')[1];
                        const fetchResult = await fetch('http://localhost:3030/treble/newLesson/songs/'+(Number(curLocation)+1).toString());
                        setTimeout( () => {
                            window.location.href = fetchResult.url;
                        }, 1000);
                    }
                }
                catch (e) {
                    console.log(e);
                }
            } else {
                beginTimer();
                // set the new text and new image
                document.getElementById('qImg').src = pictures[Number(curQ)];
                document.getElementById('qTracker').textContent = 'Question: ' + (Number(curQ)+1).toString() + '/' + numQs.toString();
                document.getElementById('qTrackerProgressBar').value = Number(curQ);
            }
        }

        async function restart() {
            if (window.location.href.includes('noteLesson')) {
                const curLocation = window.location.href.split('noteLesson/')[1];
                if (window.location.href.includes('treble')) {
                    const fetchResult = await fetch('http://localhost:3030/treble/newLesson/notes/'+(Number(curLocation)).toString());
                    setTimeout( () => {
                        window.location.href = fetchResult.url;
                    }, 1000);
                }
                else if (window.location.href.includes('bass')) {
                    const fetchResult = await fetch('http://localhost:3030/bass/newLesson/notes/'+(Number(curLocation)).toString());
                    setTimeout( () => {
                        window.location.href = fetchResult.url;
                    }, 1000);
                }
            }
            else if (window.location.href.includes('songLesson')) {
                const curLocation = window.location.href.split('songLesson/')[1];
                const fetchResult = await fetch('http://localhost:3030/treble/newLesson/songs/'+(Number(curLocation)).toString());
                setTimeout( () => {
                    window.location.href = fetchResult.url;
                }, 1000);
            }
        }
        async function nextLevel(level) {
            if (window.location.href.includes('songs')) {
                const fetchResult = await fetch('http://localhost:3030/treble/songLesson/'+(Number(level)).toString());
                window.location.href = fetchResult.url;
            }
            else if (window.location.href.includes('notes')) {
                if (window.location.href.includes('treble')) {
                    const fetchResult = await fetch('http://localhost:3030/treble/noteLesson/'+(Number(level)).toString());
                    window.location.href = fetchResult.url;
                }
                else if (window.location.href.includes('bass')) {
                    const fetchResult = await fetch('http://localhost:3030/bass/noteLesson/'+(Number(level)).toString());
                    window.location.href = fetchResult.url;
                }
            }
        }

        let streak = 0;
        let currScore = 0;
        let scoreCurrQuestion = 1000;
        let interval = null
        function beginTimer(){
            scoreCurrQuestion = 1000;
            interval = setInterval(() => {
                if(scoreCurrQuestion <= 500){
                    stopTimer()
                }
                else{
                    scoreCurrQuestion -= 10;
                    document.getElementById("timer").innerText = scoreCurrQuestion;
                }

            }, 150)
        }

        function stopTimer(){
            clearInterval(interval);
        }

        function resetTimer(){
            scoreCurrQuestion=1000;
            clearInterval(interval);
        }

        function scoreCorrect(){
            clearInterval(interval)
            currScore += scoreCurrQuestion;
            streak++;
            document.getElementById("currentScore").innerText = "Total: " + currScore;
            document.getElementById("streak").innerText = "Streak: " + streak;
        }
        function scoreIncorrect(){
            streak = 0;
            document.getElementById("streak").innerText ="Streak: " + streak;
        }

        {{!-- beginTimer() --}}

    </script>
</head>
<body>
    <h1>Music With Me</h1>
    <main>
        {{{body}}}
    </main>
</body>
</html>